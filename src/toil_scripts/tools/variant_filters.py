import multiprocessing
import os

from toil_scripts.lib.files import get_files_from_filestore
from toil_scripts.lib.programs import docker_call


def gatk_genotype_gvcf(job, gvcf_ids, config, emit_threshold=10.0, call_threshold=30.0):
    """
    Runs GenotypeGVCFs on one or more gVCFs generated by HaplotypeCaller.

    :param JobFunctionWrappingJob job: Toil Job instance
    :param dict gvcf_ids: Dictionary of GVCF FileStoreIDs
    :param Namespace config: Configuration options and shared FileStoreIDs
    :param float emit_threshold: Minimum phred-scale confidence threshold for
                                 a variant to be emitted. Default: 10.0
    :param float call_threshold: Minimum phred-scale confidence threshold for
                                 a variant to be called. Default: 30.0
    :return: VCF FileStoreID
    :rtype: str
    """
    job.fileStore.logToMaster('Running GATK GenotypeGVCF')
    work_dir = job.fileStore.getLocalTempDir()
    inputs = {'genome.fa': config.genome_fasta, 'genome.fa.fai': config.genome_fai,
              'genome.dict': config.genome_dict}
    inputs.update(gvcf_ids)
    get_files_from_filestore(job, work_dir, inputs)

    cores = multiprocessing.cpu_count()
    command = ['-T', 'GenotypeGVCFs',
               '-nt', str(cores),
               '-R', 'genome.fa',
               '--out', 'joint.vcf',
               '-stand_emit_conf', str(emit_threshold),
               '-stand_call_conf', str(call_threshold)]

    # Genotype across cohort GVCFs
    for uuid in gvcf_ids.keys():
        command.extend(['--variant', uuid])

    # Check for annotations missed by HaploTypeCaller
    for annotation in config.annotations:
        command.extend(['-A', annotation])

    if config.unsafe_mode:
        command = ['-U', 'ALLOW_SEQ_DICT_INCOMPATIBILITY'] + command

    outputs = {'joint.vcf': None}
    docker_call(work_dir = work_dir,
                env={'JAVA_OPTS':'-Djava.io.tmpdir=/data/ -Xmx{}'.format(config.xmx)},
                parameters = command,
                tool = 'quay.io/ucsc_cgl/gatk:3.5--dba6dae49156168a909c43330350c6161dc7ecc2',
                inputs=inputs.keys(),
                outputs=outputs)
    return job.fileStore.writeGlobalFile(os.path.join(work_dir, 'joint.vcf'))


def gatk_select_variants(job, mode, vcf_id, config):
    """
    Isolate variant types using GATK SelectVariants

    :param job: Toil Job instance
    :param mode str: variant type (i.e. SNP or INDEL)
    :param vcf_id str: VCF FileStoreID
    :param config Namespace: Configuration and shared FileStoreIDs
    :return: VCF FileStoreID
    :rtype: str
    """
    job.fileStore.logToMaster('Running GATK SelectVariants: %s' % mode)
    work_dir = job.fileStore.getLocalTempDir()
    inputs = {'genome.fa': config.genome_fasta, 'genome.fa.fai': config.genome_fai,
              'genome.dict': config.genome_dict, 'input.vcf': vcf_id}
    get_files_from_filestore(job, work_dir, inputs)

    output = "raw_%s.vcf" % mode

    command = ['-R', 'genome.fa',
               '-T', 'SelectVariants',
               '-V', 'input.vcf',
               '-o', output,
               '-selectType', mode]

    outputs = {output: None}
    docker_call(work_dir = work_dir,
                env={'_JAVA_OPTIONS':'-Djava.io.tmpdir=/data/ -Xmx{}'.format(config.xmx)},
                parameters = command,
                tool = 'quay.io/ucsc_cgl/gatk:3.5--dba6dae49156168a909c43330350c6161dc7ecc2',
                inputs=inputs.keys(),
                outputs=outputs)
    return job.fileStore.writeGlobalFile(os.path.join(work_dir, output))


def gatk_variant_filtration(job, mode, vcf_id, config):
    """
    Filters VCF using GATK recommended filters. VCF must contain a single variant
    type: SNPs or INDEL.

    SNP Filter:
    QD < 2.0 || FS > 60.0 || MQ < 40.0 || MQRankSum < -12.5 || ReadPosRankSum < -8.0

    INDEL Filter:
    QD < 2.0 || FS > 200.0 || ReadPosRankSum < -20.0

    :param job: Toil Job instance
    :param mode str: variant type
    :param vcf_id str: VCF FileStoreID
    :param config Namespace: Configuration and shared FileStoreIDs
    :return: Filtered VCF FileStoreID
    :rtype: str
    """
    job.fileStore.logToMaster('Apply %s Filter' % mode)
    work_dir = job.fileStore.getLocalTempDir()
    inputs = {'genome.fa': config.genome_fasta, 'genome.fa.fai': config.genome_fai,
              'genome.dict': config.genome_dict, 'input.vcf': vcf_id}
    get_files_from_filestore(job, work_dir, inputs)

    # Recommended GATK hard filters:
    # https://software.broadinstitute.org/gatk/documentation/article?id=2806
    mode = mode.upper()
    if mode == 'SNP':
        expression = '"QD < 2.0 || FS > 60.0 || MQ < 40.0 || ' \
                     'MQRankSum < -12.5 || ReadPosRankSum < -8.0"'

    elif mode == 'INDEL':
        expression = '"QD < 2.0 || FS > 200.0 || ReadPosRankSum < -20.0"'

    else:
        raise ValueError('Variant filter modes can be SNP or INDEL, got %s' % mode)

    command = ['-T', 'VariantFiltration',
               '-R', 'genome.fa',
               '-V', 'input.vcf',
               '--filterExpression', expression,
               '--filterName', 'GATK_Germline_Hard_Filter_%s' % mode,
               '-o', 'filtered_variants.vcf']

    outputs = {'filtered_variants.vcf': None}
    docker_call(work_dir = work_dir,
                env={'_JAVA_OPTIONS':'-Djava.io.tmpdir=/data/ -Xmx{}'.format(config.xmx)},
                parameters = command,
                tool = 'quay.io/ucsc_cgl/gatk:3.5--dba6dae49156168a909c43330350c6161dc7ecc2',
                inputs=inputs.keys(),
                outputs=outputs)
    return job.fileStore.writeGlobalFile(os.path.join(work_dir, 'filtered_variants.vcf'))


def gatk_variant_recalibrator(job, mode, vcf_id, config):
    """
    Variant quality score recalibration for SNP or INDEL variants.

    :param JobFunctionWrappingJob job: Job instance
    :param str mode: Determines variant filter type (SNP or INDEL)
    :param str vcf_id: VCF FileStoreID
    :param Namespace config: Input parameters and shared FileStoreIDs
    :return: recalibration table, tranches, plot FileStoreIDs
    :rtype: tuple
    """
    mode = mode.upper()
    if mode not in {'INDEL', 'SNP'}:
        raise ValueError('Variant recalibration mode must be INDEL or SNP, got %s' % mode)

    job.fileStore.logToMaster('Running GATK VariantRecalibrator ({} Mode)'.format(mode.upper()))
    cores = multiprocessing.cpu_count()
    work_dir = job.fileStore.getLocalTempDir()
    inputs = {'genome.fa': config.genome_fasta, 'genome.fa.fai': config.genome_fai,
              'genome.dict': config.genome_dict, 'input.vcf': vcf_id}

    # GATK recommended parameters:
    # https://software.broadinstitute.org/gatk/documentation/article?id=1259
    # https://software.broadinstitute.org/gatk/documentation/article?id=2805
    # DP is a recommended annotation, but does not work well with exome data
    command = ['-T', 'VariantRecalibrator',
               '-R', 'genome.fa',
               '-input', 'input.vcf',
               '-nt', str(cores),
               '--maxGaussians', '4',
               '-an', 'QualByDepth',
               '-an', 'FisherStrand',
               '-an', 'StrandOddsRatio',
               '-an', 'ReadPosRankSum',
               '-an', 'MQRankSum',
               '-an', 'InbreedingCoeff',
               '-tranche', '100.0',
               '-tranche', '99.9',
               '-tranche', '99.0',
               '-tranche', '90.0',
               '-recalFile', 'recal',
               '-tranchesFile', 'tranches',
               '-rscriptFile', 'plots']

    if mode.upper() == 'INDEL':
        command += ['-resource:mills,known=false,training=true,truth=true,prior=12.0', 'mills.vcf',
                    '-resource:dbsnp,known=true,training=false,truth=false,prior=2.0', 'dbsnp.vcf',
                    '-mode', 'INDEL']
        inputs['mills.vcf'] = config.mills
        inputs['dbsnp.vcf'] = config.dbsnp

    if mode.upper() == 'SNP':
        command += ['-resource:hapmap,known=false,training=true,truth=true,prior=15.0', 'hapmap.vcf',
                    '-resource:omni,known=false,training=true,truth=true,prior=12.0', 'omni.vcf',
                    '-resource:dbsnp,known=true,training=false,truth=false,prior=2.0', 'dbsnp.vcf',
                    '-resource:1000G,known=false,training=true,truth=false,prior=10.0', '1000G.vcf',
                    '-an', 'RMSMappingQuality',
                    '-mode', 'SNP']
        inputs['hapmap.vcf'] = config.hapmap
        inputs['omni.vcf'] = config.omni
        inputs['dbsnp.vcf'] = config.dbsnp
        inputs['1000G.vcf'] = config.phase

    if config.unsafe_mode:
        command = ['-U', 'ALLOW_SEQ_DICT_INCOMPATIBILITY'] + command

    get_files_from_filestore(job, work_dir, inputs)
    outputs = {'recal': None, 'tranches': None, 'plots': None}
    docker_call(work_dir = work_dir,
                env={'JAVA_OPTS':'-Djava.io.tmpdir=/data/ -Xmx{}'.format(config.xmx)},
                parameters = command,
                tool ='quay.io/ucsc_cgl/gatk:3.5--dba6dae49156168a909c43330350c6161dc7ecc2',
                inputs=inputs.keys(),
                outputs=outputs)
    recal_id = job.fileStore.writeGlobalFile(os.path.join(work_dir, 'recal'))
    tranches_id = job.fileStore.writeGlobalFile(os.path.join(work_dir, 'tranches'))
    plots_id = job.fileStore.writeGlobalFile(os.path.join(work_dir, 'plots'))
    return recal_id, tranches_id, plots_id


def gatk_apply_variant_recalibration(job, mode, vcf_id, recal_id, tranches_id, config):
    """
    Apply variant quality score recalibration.

    :param JobFunctionWrappingJob job: Toil Job instance
    :param str vcf_id: VCF FileStoreID
    :param str recal_id: Recalibration table FileStoreID
    :param str tranches_id: Tranches FileStoreID
    :param Namespace config: Pipeline configuration options and shared files
    :return: Recalibrated VCF file store ID
    :rtype: str
    """
    mode = mode.upper()
    job.fileStore.logToMaster('Running GATK ApplyRecalibration ({} Mode): {}'.format(mode, config.uuid))
    cores = multiprocessing.cpu_count()
    work_dir = job.fileStore.getLocalTempDir()
    inputs = {'genome.fa': config.genome_fasta, 'genome.fa.fai': config.genome_fai,
              'genome.dict': config.genome_dict, 'input.vcf': vcf_id,
              'recal': recal_id, 'tranches': tranches_id}
    get_files_from_filestore(job, work_dir, inputs)

    # GATK recommended parameters:
    # https://software.broadinstitute.org/gatk/documentation/article?id=2805
    command = ['-T', 'ApplyRecalibration',
               '-nt', str(cores),
               '-R', 'genome.fa',
               '-input', 'input.vcf',
               '-o', 'vqsr.vcf',
               '-ts_filter_level', '99.0',
               '-recalFile', 'recal',
               '-tranchesFile', 'tranches',
               '-mode', mode]

    if config.unsafe_mode:
        command = ['-U', 'ALLOW_SEQ_DICT_INCOMPATIBILITY'] + command

    outputs={'vqsr.vcf': None}
    docker_call(work_dir = work_dir,
                env={'JAVA_OPTS':'-Djava.io.tmpdir=/data/ -Xmx{}'.format(config.xmx)},
                parameters = command,
                tool = 'quay.io/ucsc_cgl/gatk:3.5--dba6dae49156168a909c43330350c6161dc7ecc2',
                inputs=inputs.keys(),
                outputs=outputs)
    return job.fileStore.writeGlobalFile(os.path.join(work_dir, 'vqsr.vcf'))
